---
- name: Genie를 활용한 Mold VM 배포
  hosts: localhost
  gather_facts: no
  vars:
    genie_ip: 'localhost'
  tasks:
##### Deploy VirtualMachine #####

    - name: 가상머신 생성
      cs_instance:
        api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
        api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
        api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
        zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
        name: hwryu-deploy-vm2
        template: CentOS-8-5-2111-cloudinit
        service_offering: 2C-4GB-RBD
        ssh_key: "{{ lookup('env', 'MOLD_SSH_KEYPAIR') }}"
        user_data: |
            #cloud-config
            disable_root: false
            ssh_pwauth: true
        networks:
          - "{{ lookup('env', 'AC_NETWORK_NAME') }}"

    - name: 가상머신 생성 후 ssh_key 생성을 위한 대기
      wait_for:
        timeout: 10

    - name: 배포한 가상머신 정보 수집
      cs_instance_info:
        api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
        api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
        api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
        name: hwryu-deploy-vm2
      delegate_to: localhost
      register: vm

    - name: 배포 가상머신 ip 정보 수집
      debug:
        msg: "{{ vm.instances[0].nic[0].ipaddress }}"

    - name: Create Public IP
      cs_ip_address:
        api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
        api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
        api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
        zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
        network: "{{ lookup('env', 'AC_NETWORK_NAME') }}"
      register: ac_public_ip

    - name: Public IP 정보 수집
      debug:
        msg: "{{ ac_public_ip.ip_address }}"

    - name: Create a static NAT for 'ac_public_ip.ip_address' to hwryu-deploy-vm2
      cs_staticnat:
        api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
        api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
        api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
        ip_address: "{{ ac_public_ip.ip_address }}"
        zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
        vm: hwryu-deploy-vm2
      delegate_to: localhost

    - name: Allow 88 port for public ip
      cs_firewall:
        api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
        api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
        api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
        ip_address: "{{ ac_public_ip.ip_address }}"
        zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
        start_port: 80
        end_port: 80
        protocol: tcp
      delegate_to: localhost

    - name: Allow 22 port for public ip
      cs_firewall:
        api_url: "{{ lookup('env', 'MOLD_API_URL') }}"
        api_key: "{{ lookup('env', 'MOLD_API_KEY') }}"
        api_secret: "{{ lookup('env', 'MOLD_SECRET_KEY') }}"
        ip_address: "{{ ac_public_ip.ip_address }}"
        zone: "{{ lookup('env', 'MOLD_ZONE_NAME') }}"
        start_port: 22
        end_port: 22
        protocol: tcp
      delegate_to: localhost

    # - name: AWX 초기 관리자 패스워드 추출
    #   shell: kubectl get -n awx secret awx-admin-password -o jsonpath="{.data.password}" | base64 --decode
    #   register: admin_password
    #   delegate_to: 10.10.3.47

    # - name: Add host to inventory
    #   awx.awx.host:
    #     name: "{{ vm.instances[0].nic[0].ipaddress }}"
    #     description: "deploiedVm"
    #     inventory: "genie_inventory"
    #     state: present
    #     controller_host: "http://{{ genie_ip }}:80"
    #     controller_username: admin
    #     controller_password: "{{ admin_password.stdout }}"

    - name: ansible 설정파일 구성
      command: 
        cmd: "{{ item.command }}"
        chdir: /root
      with_items:
        - {command: '/bin/bash -c "touch /runner/project/ansible.cfg"'}
        - {command: '/bin/bash -c "cat /dev/null > /runner/project/ansible.cfg"'}
        - {command: '/bin/bash -c "echo [defaults] >> /runner/project/ansible.cfg"'}
        - {command: '/bin/bash -c "echo # uncomment this to disable SSH key host checking >> /runner/project/ansible.cfg"'}
        - {command: '/bin/bash -c "echo host_key_checking = False >> /runner/project/ansible.cfg"'}
      delegate_to: localhost

    - name: command
      shell: ip a
      register: whoami
      delegate_to: "{{ vm.instances[0].nic[0].ipaddress }}"

    - name: 배포 가상머신 ip 정보 수집
      debug:
        msg: "{{ whoami }}"
      delegate_to: "{{ vm.instances[0].nic[0].ipaddress }}"


    # - name: populate service facts
    #   ansible.builtin.service_facts:
    # - debug: var=services[service]['status']
    # - debug:
    #    msg: "{{ services[service]['status'] }}"
    # - name: debug set fact
    #   set_fact:
    #    http_status: "{{ services[service]['status'] }}"

    # - name: Populate service facts
    #   ansible.builtin.service_facts:
    #   register: services_state
      
    # - debug: var=services_state.ansible_facts.services.netconsole.state
    # - debug: var=services_state.ansible_facts.services.firewalld.service.state
